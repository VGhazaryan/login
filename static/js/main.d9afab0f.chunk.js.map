{"version":3,"sources":["utils/validation.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["validation","login","pass","checkLogin","test","checkPass","loginError","passwordError","formError","visible","alert","theme","createMuiTheme","palette","primary","main","contrastText","secondary","Login","props","loginChangeHandler","event","setState","target","value","passChangeHandler","handleLogin","arr","state","ThemeProvider","className","FormControl","fullWidth","aria-describedby","TextField","error","this","classes","overrides","root","variant","color","label","margin","id","type","onChange","Button","size","onClick","FormHelperText","style","display","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAAaA,EAAa,SAACC,EAAOC,GAC9B,IAGMC,EAHW,4EAGWC,KAAKH,GAC3BI,EAHU,qBAGUD,KAAKF,GAC1BI,GAAkD,EAAtCC,GAA6C,EAA9BC,GAAqC,EAA1BC,GAAiC,EAmB5E,OAjBGN,GAAcE,EACbK,MAAM,gBAAD,OAAiBT,IAER,KAAVA,GAAyB,KAATC,GACF,KAAVD,IACAK,GAAa,EACbG,EAAQ,QAEC,KAATP,IACAK,GAAgB,EAChBE,EAAQ,UAGZD,GAAU,EACVC,EAAQ,SAGT,CAACH,EAAYC,EAAeC,EAAWC,I,gBCjB5CE,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,UACNC,aAAc,WAElBC,UAAW,CACPF,KAAM,UACNC,aAAc,cAyFXE,E,YAnFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CAACrB,MAAOoB,EAAME,OAAOC,QACnC,EAAKF,SAAS,CAAChB,YAAY,IAC3B,EAAKgB,SAAS,CAACd,WAAW,EAAOC,QAAS,UAf3B,EAkBnBgB,kBAAoB,SAACJ,GACjB,EAAKC,SAAS,CAACpB,KAAMmB,EAAME,OAAOC,QAClC,EAAKF,SAAS,CAACf,eAAe,IAC9B,EAAKe,SAAS,CAACd,WAAW,EAAOC,QAAS,UArB3B,EAwBnBiB,YAAc,WACV,IAAIC,EAAM3B,EAAW,EAAK4B,MAAM3B,MAAM,EAAK2B,MAAM1B,MACjD,EAAKoB,SAAU,CACXhB,WAAYqB,EAAI,GAChBpB,cAAeoB,EAAI,GACnBnB,UAAWmB,EAAI,GACflB,QAASkB,EAAI,MA5BjB,EAAKC,MAAQ,CACT3B,MAAO,GACPC,KAAM,GACNI,YAAY,EACZC,eAAe,EACfC,WAAW,EACXC,QAAS,QARE,E,sEAmCX,OACI,kBAACoB,EAAA,EAAD,CAAelB,MAAOA,GAClB,yBAAKmB,UAAU,mBACf,kBAACC,EAAA,EAAD,CAAaC,WAAW,EAAMC,mBAAiB,cAC3C,kBAACC,EAAA,EAAD,CACIC,MAAOC,KAAKR,MAAMtB,WAClB+B,QAAS,CAACC,UAAU,CAACC,KAAM,UAC3BC,QAAQ,WACRC,MAAM,YACNC,MAAM,QACNC,OAAO,QACPC,GAAG,QACHC,KAAK,OACLrB,MAAOY,KAAKR,MAAM3B,MAClB6C,SAAUV,KAAKhB,qBAEnB,kBAACc,EAAA,EAAD,CACIC,MAAOC,KAAKR,MAAMrB,cAClBiC,QAAQ,WACRC,MAAM,YACNC,MAAM,WACNT,mBAAiB,iBACjBU,OAAO,QACPC,GAAG,OACHC,KAAK,WACLrB,MAAOY,KAAKR,MAAM1B,KAClB4C,SAAUV,KAAKX,oBAEnB,kBAACsB,EAAA,EAAD,CACIP,QAAQ,YACRQ,KAAK,SACLP,MAAM,YACNT,UAAU,QACViB,QAASb,KAAKV,aALlB,UAOA,kBAACwB,EAAA,EAAD,CACIf,MAAOC,KAAKR,MAAMpB,UAClB2C,MAAO,CAACC,QAAShB,KAAKR,MAAMnB,SAC5BmC,GAAG,cAHP,sC,GAvEJS,aCTLC,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCKcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d9afab0f.chunk.js","sourcesContent":["export const validation = (login, pass) => {\r\n    const regLogin = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n    const regPass = /^[a-zA-Z0-9]{8,16}/;\r\n\r\n    const checkLogin = regLogin.test(login);\r\n    const checkPass = regPass.test(pass);\r\n    let [loginError, passwordError, formError, visible] = [false, false, false, false];\r\n\r\n    if(checkLogin && checkPass){\r\n        alert(`Welcome back ${login}`);\r\n    }else{\r\n        if (login === '' || pass === '') {\r\n            if (login === '') {\r\n                loginError = true;\r\n                visible='none';\r\n            }\r\n            if (pass === '') {\r\n                passwordError = true;\r\n                visible='none';\r\n            }\r\n        } else {\r\n            formError=true;\r\n            visible='block';\r\n        }\r\n    }\r\n    return [loginError, passwordError, formError, visible];\r\n};","import React, {Component} from 'react';\r\nimport './Login.css';\r\nimport { FormControl, FormHelperText, TextField, Button } from '@material-ui/core';\r\nimport {validation} from \"../../utils/validation\";\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#16161E',\r\n            contrastText: '#f58b24'\r\n        },\r\n        secondary: {\r\n            main: '#f58b24',\r\n            contrastText: '#ffffff'\r\n        },\r\n    },\r\n});\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login: '',\r\n            pass: '',\r\n            loginError: false,\r\n            passwordError: false,\r\n            formError: false,\r\n            visible: 'none'\r\n        }\r\n    }\r\n\r\n    loginChangeHandler = (event) => {\r\n        this.setState({login: event.target.value});\r\n        this.setState({loginError: false});\r\n        this.setState({formError: false, visible: 'none'});\r\n    };\r\n\r\n    passChangeHandler = (event) => {\r\n        this.setState({pass: event.target.value});\r\n        this.setState({passwordError: false});\r\n        this.setState({formError: false, visible: 'none'});\r\n    };\r\n\r\n    handleLogin = () => {\r\n        let arr = validation(this.state.login,this.state.pass);\r\n        this.setState( {\r\n            loginError: arr[0],\r\n            passwordError: arr[1],\r\n            formError: arr[2],\r\n            visible: arr[3]\r\n        });\r\n    }\r\n\r\n        render(){\r\n            return(\r\n                <ThemeProvider theme={theme}>\r\n                    <div className='form__container'>\r\n                    <FormControl fullWidth={true} aria-describedby='form-error'>\r\n                        <TextField\r\n                            error={this.state.loginError}\r\n                            classes={{overrides:{root: 'input'}}}\r\n                            variant='outlined'\r\n                            color='secondary'\r\n                            label='Login'\r\n                            margin='dense'\r\n                            id='login'\r\n                            type=\"text\"\r\n                            value={this.state.login}\r\n                            onChange={this.loginChangeHandler}\r\n                        />\r\n                        <TextField\r\n                            error={this.state.passwordError}\r\n                            variant='outlined'\r\n                            color='secondary'\r\n                            label='Password'\r\n                            aria-describedby='password-error'\r\n                            margin='dense'\r\n                            id='pass'\r\n                            type='password'\r\n                            value={this.state.pass}\r\n                            onChange={this.passChangeHandler}\r\n                        />\r\n                        <Button\r\n                            variant='contained'\r\n                            size='medium'\r\n                            color='secondary'\r\n                            fullWidth='false'\r\n                            onClick={this.handleLogin}\r\n                        >Log In</Button>\r\n                        <FormHelperText\r\n                            error={this.state.formError}\r\n                            style={{display: this.state.visible}}\r\n                            id='form-error'\r\n                        >Incorrect login or password</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                </ThemeProvider>\r\n            )\r\n        }\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Login from \"./components/Login/Login\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}